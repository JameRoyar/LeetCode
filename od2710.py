# 围棋棋盘由纵横各19条线垂直相交组成，棋盘上一共19x19=361个交点，对弈双方一方执白棋，一方执黑棋，落子时只能将棋子置于交点上。
# “气”是围棋中很重要的一个概念，某个棋子有几口气，是指其上下左右方向四个相邻的交叉点中，有几个交又点没有棋子，由此可知：
# 1、在棋盘的边缘上的棋子最多有3口气（黑1），在棋盘角点的棋子最多有2口气（黑2），其它情况最多有4口气（白1）
#
#
#
# 2、所有同色棋子的气之和叫作该色棋子的气，需要注意的是，同色棋子重合的气点，对于该颜色棋子来说，只能计算一次气，比如下图中，黑棋一共4口气，而不是5口气，因为黑1和黑2中间红色三角标出的气，是两个黑棋共有的，对于黑棋整体来说只能算一个气。
#
#
#
# 3、本题目只计算气，对于眼也按气计算，如果您不清楚“眼”的概念，可忽略。按照前面描述的规则计算即可。
# 现在，请根据输入的黑棋和白棋的坐标位置，计算黑和白棋一共各有多少气?
#
#
# 输入
# 输入包括两行数据，如:
#
# 0 5 8 9 9 10
#
# 5 0 9 9 9 8
#
# 1、每行数据以空格分隔，数据个数是2的整数倍，每两个数是一组，代表棋子在棋盘上的坐标
#
# 2、坐标的原点在棋盘左上角点，第一个值是行号，范围从0到18；第二个值是列号，范围从0到18
#
# 3、举例说明：第一行数据表示三个坐标(0, 5)、(8, 9)、(9, 10)
#
# 4、第一行表示黑棋的坐标，第二行表示白棋的坐标。
#
# 5、题目保证输入两行数据，无空行且每行按前文要求是偶数个，每个坐标不会超出棋盘范围。

# 输入处理
# lst_black = list(map(int, input().split()))
# lst_white = list(map(int, input().split()))

lst_black = [0, 5, 8, 9, 9, 10]
lst_white = [5, 0, 9, 9, 9, 8]

# 转换集合
set_black = set((lst_black[i], lst_black[i + 1]) for i in range(0, len(lst_black), 2))
set_white = set((lst_white[i], lst_white[i + 1]) for i in range(0, len(lst_white), 2))

# 构建周边偏移
R = [(1, 0), (0, 1), (-1, 0), (0, -1)]


def cal_qi(setA, setB):
    set_qi = set()
    for i, j in setA:
        for ri, rj in R:
            # 计算每一个点的四个位置合法性
            ni, nj = i + ri, j + rj
            # 不越界 并且不属于任何一个集合才合法
            if (0 <= ni <= 18 and 0 <= nj <= 18) and (ni, nj) not in setA and (ni, nj) not in setB:
                set_qi.add((ni, nj))
    return len(set_qi)


ans_black = cal_qi(set_black, set_white)
ans_white = cal_qi(set_white, set_black)

print(ans_black, ans_white)