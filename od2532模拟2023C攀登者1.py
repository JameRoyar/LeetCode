# 2532: 【模拟】2023C-攀登者1
# 内存限制：128 MB
# 时间限制：1.000 S
# 评测方式：文本比较
# 命题人：外部导入
# 提交：368
# 解决：107
# 题目描述
# 攀登者喜欢寻找各种地图，并且尝试攀登到最高的山峰。
# 地图表示为一维数组，数组的索引代表水平位置，数组的高度代表相对海拔高度。其中数组元素 0 代表地面。
# 例如[0,1,2,4,3,1,0,0,1,2,3,1,2,1,0]， 代表如下图所示的地图。地图中有两个山脉位置分别为 1,2,3,4,5和8,9,10,11,12,13，最高峰高度分别为 4,3。最高峰位置分别为3,10。
# 一个山脉可能有多座山峰（高度大于相邻位置的高度，或在地图边界且高度大于相邻的高度）。
#
#                  4
#
#               +---+
#               |   |
#               |   | 3                       3
#               |   |
#               |   +---+                   +---+
#               |       |                   |   |
#             2 |       |                 2 |   |     2
#               |       |                   |   |
#           +---+       |               +---+   |   +---+
#           |           |               |       |   |   |
#         1 |           | 1           1 |       | 1 |   | 1
#           |           |               |       |   |   |
#       +---+           +---+       +---+       +---+   +---+
#       |                   |       |                       |
#     0 |                   | 0   0 |                       | 0
#       |                   |       |                       |
#   +---+                   +-------+                       +---+
#
#     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14
# 登山时会消耗登山者的体力(整数)，上山时，消耗相邻高度差两倍的体力，下坡时消耗相邻高度差一倍的体力，平地不消耗体力，登山者体力消耗到零时会有生命危险。
# 例如，上图所示的山峰：从索引 0，走到索引 1，高度差为 1，需要消耗 2*1=2 的体力；从索引 2 高度 2走到高度 4 索引 3 需要消耗 2*2=4 的体力；从索引 3 走到索引 4 则消耗 1*1=1 的体力。
#
# 登山者想知道一张地图中有多少座山峰？
# 输入
# 第一行输入一个长度为N的数组，表示地图。
# 输出
# 输出一个数字，地图中的山峰数量
# 样例输入 复制
# 0,1,4,3,1,0,0,1,2,3,1,2,1,0
# 样例输出 复制
# 3

# input()
lst = list(map(int, input().split(',')))

# solution
ans = 0
n = len(lst)
if n == 0:
    print(0)
elif n == 1 and lst[0] > 0:
    print(1)
elif n == 1 and lst[0] == 0:
    print(0)
elif n == 2 and lst[0] == lst[1] and lst[0] == 0:
    print(0)
elif n == 2 and lst[0] == lst[1]:
    print(1)
elif n == 2 and lst[0] != lst[1]:
    print(1)
else:
    if lst[0] > lst[1] : ans += 1
    if lst[-1] > lst[-2] : ans += 1
    for i in range(1, n - 1):
        if lst[i] > lst[i - 1] and lst[i] > lst[i + 1]:
            ans += 1
    print(ans)
