# 已知火星人使用的运算符号为 # 、$ 他们与地球人的等价公式如下：
#
# - x#y = 4*x+3*y+2
#
# - x$y = 2*x+y+3
#
# 其中 x y 是无符号整数
#
# 地球人公式按照 C 语言规则进行计算
#
# 火星人公式中 # 符优先级高于 $
#
# 相同的运算符按从左到右的顺序运算
#
# 输入
# 火星人字符串表达式结尾不带回车换行
#
# 输入的字符串说明： 字符串为仅有无符号整数和操作符组成的计算表达式
#
# 1. 用例保证字符串中操作数与操作符之间没有任何分隔符
#
# 2. 用例保证操作数取值范围为 32 位无符号整数
#
# 3. 保证输入以及计算结果不会出现整型溢出
#
# 4. 保证输入的字符串为合法的求值报文
#
# 5. 保证不会出现非法的求值报文
#
# 例如：
#
#  - #4$5 这种缺少操作数；
#
# - 4$5# 这种缺少操作数；
#
# - 4#$5 这种缺少操作数；
#
# - 4 $5 有空格； - 3+4-5*6/7 有其他操作符；
#
# - 12345678987654321$54321 32 位整数溢出
#
# 输出
# 根据火星人字符串输出计算结果，结尾不带回车换行
# 样例输入 复制
# 7#6$5#12
# 样例输出 复制
# 157
# 提示
# 7#6$5#12
#
# =(4*7+3*6+2)$5#12
#
# =48$5#12
#
# =48$(4*5+3*12+2)
#
# =48$58
#
# =2*48+58+3
#
# =157
#
# - x#y = 4*x+3*y+2
#
# - x$y = 2*x+y+3
strs = input()
stack = []
pre_sign_well = False
num = 0
strs = strs + " "
def cal1(a,b):
    return 4*a+3*b+2
def cal2(a,b):
    return 2*a+b+3

for i in strs:
    if i.isdigit():
        num = num*10+int(i)
    else:
        stack.append(num)
        num = 0
        if pre_sign_well:
            y = stack.pop()
            x = stack.pop()
            res = cal1(x,y)
            stack.append(res)
        pre_sign_well = (i == "#")

ans = stack[0]
for i in stack[1:]:
    ans = cal2(ans,i)
print(ans)