#选择排序
# 时间复杂度O(n^2)
# 空间复杂度O(1)
# 稳定排序
# 原理：
# 1. 首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置
# 2. 再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。
# 3. 重复第二步，直到所有元素均排序完毕。
# 4. 选择排序是一种简单直观的排序算法。它是一种比较排序，其工作原理：首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。
# 5. 选择排序是不稳定的排序方法。
# 6. 选择排序最好、最坏、平均时间复杂度均为O(n^2)。
# 7. 选择排序的空间复杂度为O(1)。
# 8. 选择排序算法可以作为冒泡排序算法的一个变种。
# 9. 选择排序算法是一种简单直观的排序算法。它的工作原理：首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。
def selectionSort(nums):
    n = len(nums)
    for i in range(n):
        min_index = i  # 记录最小值的下标
        for j in range (i+1, n):
            if nums[j] < nums[min_index]:
                min_index = j
        nums[i], nums[min_index] = nums[min_index], nums[i]
    return nums


if __name__ == '__main__':
    nums = [3, 2, 3, 4, 551, 4, 11, 8, 944, 10]
    print(selectionSort(nums))